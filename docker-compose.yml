version: "3.8"

services:
  proxy:
    image: haproxy:2.6
    ports:
      - ${PORT}:80
      - ${PROXY_STATS_PORT}:1936
    volumes:
      - ./load-balancer/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
    restart: always
    networks:
      - db-nodes

  database:
    build: ./database-go
    deploy:
      mode: replicated
      replicas: ${DATABASE_REPLICAS}
    environment:
      SERVICE_PORT: 80 # Service HTTP port
      MESH_NETWORK_URL: "http://proxy:80" # The url to join to the mesh (usually for production is the loadBalancer URL)
      LOG_LEVEL: 4 # Log level 0 to 4 (check service documentation)
    working_dir: /
    entrypoint: [ "/docker-gs-ping" ]
    healthcheck:
      test: "wget --no-verbose --tries=1 --spider http://127.0.0.1/healthcheck || exit 1"
      interval: 5s
      timeout: 2s
      retries: 5
    restart: unless-stopped
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - db-nodes

  database-poc:
    build: ./database-poc
    deploy:
      mode: replicated
      replicas: ${DATABASE_REPLICAS}
    environment:
      SERVICE_PORT: 80 # Service HTTP port
      MESH_NETWORK_URL: "http://proxy:80" # The url to join to the mesh (usually for production is the loadBalancer URL)
      LOG_LEVEL: 0 # Log level 0 to 4 (check service documentation)
    working_dir: /app
    command: npm run start
    healthcheck:
      test: "wget --no-verbose --tries=1 --spider http://127.0.0.1/healthcheck || exit 1"
      interval: 5s
      timeout: 2s
      retries: 5
    restart: unless-stopped
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - db-nodes

  tests:
    build: ./tests
    environment:
      SERVICE_URL: "http://proxy"
    working_dir: /app
    # command: "npm run test"
    # command: "npm run stress"
    depends_on:
      - proxy
    networks:
      - db-nodes

networks:
  db-nodes:
    driver: bridge
